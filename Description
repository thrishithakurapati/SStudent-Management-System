Certainly! Here's a detailed description of the **Student Management System** program:

### Description

**Student Management System**

This program provides a simple console-based Student Management System that allows users to perform various operations on a list of student records. The operations include adding a new student, deleting an existing student, updating student details, searching for a student, and displaying all students.

#### Key Features:

1. **Add Student**
   - Allows the user to add a new student's record to the system.
   - The user inputs the student's roll number, name, and marks.
   - The program checks if the maximum number of students has been reached and prevents adding more if the database is full.

2. **Delete Student**
   - Enables the user to delete a student's record based on the roll number.
   - If a student with the given roll number is found, their record is removed and the list is updated.
   - The program shifts remaining records to fill the gap left by the deleted record.

3. **Update Student**
   - Provides the functionality to update the details of an existing student.
   - The user specifies the roll number of the student to update and then inputs the new name and marks.
   - The program searches for the student with the specified roll number and updates their record.

4. **Search Student**
   - Allows the user to search for a student by roll number.
   - If a student with the given roll number is found, their details (roll number, name, and marks) are displayed.

5. **Display All Students**
   - Displays a list of all students currently in the system.
   - Shows each student's roll number, name, and marks in a tabular format.

6. **Exit**
   - Ends the program execution.

### Program Structure

1. **Data Structure:**
   - `Student`: A structure to store individual student records with fields for roll number, name, and marks.
   - `students[]`: An array of `Student` structures to hold multiple student records.
   - `num_students`: An integer to track the current number of students in the system.

2. **Functions:**
   - `displayMenu()`: Prints the main menu options for the user.
   - `addStudent(Student students[], int *num_students)`: Adds a new student to the array.
   - `deleteStudent(Student students[], int *num_students)`: Removes a student from the array based on the roll number.
   - `updateStudent(Student students[], int num_students)`: Updates an existing student's record.
   - `searchStudent(Student students[], int num_students)`: Searches for a student and displays their details.
   - `displayStudents(Student students[], int num_students)`: Lists all students currently in the system.

3. **User Interaction:**
   - The program runs in a loop, displaying the menu and prompting the user to make a choice.
   - Based on the user's choice, the corresponding function is called to perform the desired operation.

### Error Handling and Input Validation

- **Input Validation**: Checks for valid input types (e.g., integers for roll numbers and floats for marks). If invalid input is detected, appropriate messages are displayed, and the input buffer is cleared.
- **Boundary Checks**: Ensures that the number of students does not exceed the predefined limit (`MAX_STUDENTS`).

### Usage

To use the program:
1. Compile the code using a C compiler.
2. Run the executable.
3. Follow the on-screen menu to perform various operations on student records.

This Student Management System is designed for educational purposes and to demonstrate basic file handling and user interaction in C.
